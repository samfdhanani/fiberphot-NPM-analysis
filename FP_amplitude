import pandas as pd
from scipy.signal import find_peaks
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import numpy as np
import os


# Path to the folder containing subject folders
cohort_folder = '/Users/samdhanani/Desktop/MuhleLab/FiberPhotometry/Cohort_G'


# Get a list of subject folders
subject_folders = [folder for folder in os.listdir(cohort_folder) if os.path.isdir(os.path.join(cohort_folder, folder))]

all_peak_data = []

for subject_folder in subject_folders:
    # Construct paths to subject files
    baseline_files_folder = os.path.join(cohort_folder, subject_folder, 'baseline')
    amph_files_folder = os.path.join(cohort_folder, subject_folder, 'amph')
    # Check if the baseline and amph files exist
    baseline_file_path = os.path.join(baseline_files_folder, f'{subject_folder}_baseline_zdFF.csv')
    amph_file_path = os.path.join(amph_files_folder, f'{subject_folder}_amph_zdFF.csv')
    ############################################################ specify criteria here ############################################################
    baseline_pdf_file_path = os.path.join(baseline_files_folder, subject_folder + '_plots_zdFF_7SD.pdf')
    baseline_pdf_pages = PdfPages(baseline_pdf_file_path)
    ############################################################ specify criteria here ############################################################
    amph_pdf_file_path = os.path.join(amph_files_folder, subject_folder + '_plots_zdFF_7SD.pdf')
    amph_pdf_pages = PdfPages(amph_pdf_file_path) 



    baseline_zdFF_df = pd.read_csv(baseline_file_path)
    amph_zdFF_df = pd.read_csv(amph_file_path)
    # Calculate average and standard deviation of signal data for reference state
    baseline_average_zdFF = np.mean(baseline_zdFF_df['zdFF'])
    baseline_std_zdFF = np.std(baseline_zdFF_df['zdFF'])
    amph_average_zdFF = np.mean(amph_zdFF_df['zdFF'])
    amph_std_zdFF = np.std(amph_zdFF_df['zdFF'])
    
    '''
                            comment out this section of code to remove filtering criteria
    '''

    # Define the upper and lower bounds for filtering reference state
    baseline_upper_bound = baseline_average_zdFF + (7 * baseline_std_zdFF)
    baseline_lower_bound = baseline_average_zdFF - (7 * baseline_std_zdFF)
    amph_upper_bound = amph_average_zdFF + (7 * amph_std_zdFF)
    amph_lower_bound = amph_average_zdFF - (7 * amph_std_zdFF)
    # Remove data points larger than upper bound or smaller than lower bound for reference state
    baseline_filtered_index = baseline_zdFF_df.loc[((baseline_zdFF_df['zdFF'] > baseline_upper_bound) | (baseline_zdFF_df['zdFF'] < baseline_lower_bound))].index
    baseline_zdFF_df.drop(baseline_filtered_index, inplace=True)
    amph_filtered_index = amph_zdFF_df.loc[((amph_zdFF_df['zdFF'] > amph_upper_bound) | (amph_zdFF_df['zdFF'] < amph_lower_bound))].index
    amph_zdFF_df.drop(amph_filtered_index, inplace=True)
    # Save the final filtered data to a new CSV file with a different name
    ############################################################ specify criteria here ############################################################
    baseline_filtered_file_path = os.path.join(baseline_files_folder, f'{subject_folder}_{os.path.basename(baseline_files_folder)}_zdFF_7SD.csv')
    baseline_zdFF_df.to_csv(baseline_filtered_file_path, index=False)
    ############################################################ specify criteria here ############################################################
    amph_filtered_file_path = os.path.join(amph_files_folder, f'{subject_folder}_{os.path.basename(amph_files_folder)}_zdFF_7SD.csv')
    amph_zdFF_df.to_csv(amph_filtered_file_path, index=False)
    print("baseline zdFF filtered data:", baseline_filtered_file_path)
    print("amph zdFF filtered data:", amph_filtered_file_path)



    baseline_nothreshold = 0
    amph_nothreshold = 0
    # Detect peaks with stringent criteria
    baseline_peaks, _ = find_peaks(baseline_zdFF_df['zdFF'], height=baseline_nothreshold, distance=100)
    amph_peaks, _ = find_peaks(amph_zdFF_df['zdFF'], height=amph_nothreshold, distance=100)
    baseline_peak_timestamps = baseline_zdFF_df['Timestamp'].iloc[baseline_peaks]
    baseline_peak_values = baseline_zdFF_df['zdFF'].iloc[baseline_peaks]
    amph_peak_timestamps = amph_zdFF_df['Timestamp'].iloc[amph_peaks]
    amph_peak_values = amph_zdFF_df['zdFF'].iloc[amph_peaks]

    # Analyze peak characteristics (e.g., frequency, amplitude)
    baseline_frequency = len(baseline_peaks) / (baseline_zdFF_df['Timestamp'].iloc[-1] - baseline_zdFF_df['Timestamp'].iloc[0])
    baseline_indiv_amplitudes = baseline_peak_values - baseline_peak_values.min()  # Calculate amplitude for each peak individually
    baseline_average_amplitude = baseline_peak_values.mean()
    amph_frequency = len(amph_peaks) / (amph_zdFF_df['Timestamp'].iloc[-1] - amph_zdFF_df['Timestamp'].iloc[0])
    amph_indiv_amplitudes = amph_peak_values - amph_peak_values.min()  # Calculate amplitude for each peak individually
    amph_average_amplitude = amph_peak_values.mean()

    # Calculate the area under the curve using the trapezoidal rule
    baseline_auc = np.trapz(baseline_zdFF_df['zdFF'], baseline_zdFF_df['Timestamp'])
    amph_auc = np.trapz(amph_zdFF_df['zdFF'], amph_zdFF_df['Timestamp'])

    # Visualize peaks for baseline
    plt.figure(figsize=(12, 6))
    plt.plot(baseline_zdFF_df['Timestamp'], baseline_zdFF_df['zdFF'], color='black', linewidth=1)
    plt.plot(baseline_peak_timestamps, baseline_peak_values, 'ro', markersize=5)  # Mark detected peaks
    plt.title('Detected Peaks for Baseline')
    plt.xlabel('Time (seconds)')
    plt.ylabel('z-scored ΔF/F values')
    plt.grid(True)
    baseline_pdf_pages.savefig()
    #plt.show()

    # Visualize peaks for amph
    plt.figure(figsize=(12, 6))
    plt.plot(amph_zdFF_df['Timestamp'], amph_zdFF_df['zdFF'], color='black', linewidth=1)
    plt.plot(amph_peak_timestamps, amph_peak_values, 'ro', markersize=5)  # Mark detected peaks
    plt.title('Detected Peaks for Amph')
    plt.xlabel('Time (seconds)')
    plt.ylabel('z-scored ΔF/F values')
    plt.grid(True)
    amph_pdf_pages.savefig()
    #plt.show()
    print("baseline PDF file saved:", baseline_pdf_file_path)
    print("amph PDF file saved:", amph_pdf_file_path)


    # Create a DataFrame for peak information
    baseline_peak_df = pd.DataFrame({'Timestamp': baseline_peak_timestamps, 'Amplitude': baseline_indiv_amplitudes})
    ############################################################ specify criteria here ############################################################
    baseline_peak_csv_path = os.path.join(baseline_files_folder, f'{subject_folder}_{os.path.basename(baseline_files_folder)}_amplitudes_7SD.csv')
    baseline_peak_df.to_csv(baseline_peak_csv_path, index=False)
    print("Baseline peak information saved to:", baseline_peak_csv_path)

    amph_peak_df = pd.DataFrame({'Timestamp': amph_peak_timestamps, 'Amplitude': amph_indiv_amplitudes})
    ############################################################ specify criteria here ############################################################
    amph_peak_csv_path = os.path.join(amph_files_folder, f'{subject_folder}_{os.path.basename(amph_files_folder)}_amplitudes_7SD.csv')
    amph_peak_df.to_csv(amph_peak_csv_path, index=False)
    print("Amph peak information saved to:", amph_peak_csv_path)


    # Append peak information to the list
    all_peak_data.append([
        subject_folder,
        'baseline',
        baseline_average_zdFF, 
        baseline_std_zdFF, 
        baseline_frequency, 
        baseline_average_amplitude, 
        baseline_auc
    ])
    all_peak_data.append([
        subject_folder,
        'amph',
        amph_average_zdFF, 
        amph_std_zdFF, 
        amph_frequency, 
        amph_average_amplitude, 
        amph_auc
    ])

    # Close PDF pages
    baseline_pdf_pages.close()
    amph_pdf_pages.close()
    plt.close('all')

    # Define column names
    columns = ['Subject', 'Condition', 'Average zdFF', 'Standard Deviation zdFF', 'Peak Frequency', 'Average Peak Amplitude', 'AUC']
    # Create DataFrame
    average_peak_df = pd.DataFrame(all_peak_data, columns=columns)
    # Specify the file path for CSV
    ############################################################ specify criteria here ############################################################
    average_peak_csv_path = os.path.join(cohort_folder, f'all_subjects_peak_info_7SD.csv')
    average_peak_df.to_csv(average_peak_csv_path, index=False)
    print("All subjects peak info saved to:", average_peak_csv_path)